{"version":3,"sources":["webpack:///src/app/pages/tweets/tweets.page.html","webpack:///src/app/pages/tweets/tweets-routing.module.ts","webpack:///src/app/pages/tweets/tweets.module.ts","webpack:///src/app/pages/tweets/tweets.page.scss","webpack:///src/app/pages/tweets/tweets.page.ts"],"names":["routes","path","component","TweetsPageRoutingModule","imports","forChild","exports","TweetsPageModule","declarations","TweetsPage","tweetsService","modalCtrl","auth","uniLoader","toastService","tweets","getTweets","show","dismiss","message","type","ERROR","tweet","create","componentProps","modal","onDidDismiss","then","present","deleteTweet","_id","SUCCESS","_author","me","canEdit","name","surname","selector","template"],"mappings":"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","file":"tweets-tweets-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar class='background-header'>\\n    <ion-title class='title'>Tweets</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class='box-content'>\\n  <div class='container'>\\n    <ion-list class='list-post' *ngFor=\\\"let tweet of tweets\\\">\\n        <ion-item class='box-item'>\\n          <ion-label>  \\n            <div class='item-header'>\\n              <ion-img class='profile-image' [src]='\\\"./assets/users/me.png\\\"'></ion-img>\\n              <div style='margin: 0 10px'>\\n                <p *ngIf=\\\"tweet._author; else userDeleted\\\" class=\\\"user\\\" [class.me]=\\\"canEdit(tweet)\\\">\\n                  {{ getAuthor(tweet) }} \\n                  <ion-icon *ngIf=\\\"canEdit(tweet)\\\" name=\\\"heart\\\" color=\\\"danger-tint\\\"></ion-icon> \\n                </p>\\n                <ng-template #userDeleted> \\n                  <p class=\\\"user-deleted\\\">User deleted</p>\\n                </ng-template>\\n\\n                <ion-note>{{ tweet.created_at | unictDate: 1 }}</ion-note>  \\n              </div>\\n              <div class='editOrDeletePost'>\\n                <ion-buttons *ngIf='canEdit(tweet)'>\\n                  <ion-button color=\\\"secondary\\\" (click)=\\\"createOrEditTweet(tweet)\\\">\\n                    <ion-icon slot=\\\"icon-only\\\" name=\\\"create\\\"></ion-icon>\\n                  </ion-button>\\n                  <ion-button color=\\\"danger\\\" (click)=\\\"deleteTweet(tweet)\\\">\\n                    <ion-icon slot=\\\"icon-only\\\" name=\\\"trash\\\"></ion-icon>  \\n                  </ion-button>\\n                </ion-buttons>\\n              </div>\\n            </div>\\n            <h2>{{tweet.tweet}}</h2>\\n            <div class='box-image'>\\n              <ion-img src=\\\"./assets/icon/favicon.png\\\"></ion-img>\\n            </div>\\n\\n           <!--  da sistemare completamente (creare anche un metodo per il cambio del valore booleano e la comunicazione con il backend)\\n            <ion-button color='tweet.like ? danger : white' (click)='!tweet.like'>\\n              <ion-icon slot=\\\"icon-only\\\" name='heart'></ion-icon>\\n            </ion-button> -->\\n          </ion-label> \\n        </ion-item>\\n    </ion-list>\\n  </div>\\n  <ion-fab vertical=\\\"bottom\\\" horizontal=\\\"end\\\" slot=\\\"fixed\\\"> \\n    <ion-fab-button (click)=\\\"createOrEditTweet()\\\">\\n      <ion-icon name=\\\"add\\\"></ion-icon>  \\n    </ion-fab-button>\\n  </ion-fab>\\n\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TweetsPage } from './tweets.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TweetsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TweetsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TweetsPageRoutingModule } from './tweets-routing.module';\n\nimport { TweetsPage } from './tweets.page';\nimport { UnictDatePipe } from 'src/app/pipes/unict-date.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TweetsPageRoutingModule\n  ],\n  declarations: [TweetsPage, UnictDatePipe]\n})\nexport class TweetsPageModule {}\n","export default \".user-deleted {\\n  color: var(--ion-color-light-shade);\\n}\\n\\n.user {\\n  color: var(--ion-color-secondary);\\n}\\n\\n.me {\\n  font-weight: bold;\\n  color: var(--ion-color-danger-tint);\\n}\\n\\n.box-image {\\n  width: 100%;\\n  margin: 15px 0;\\n}\\n\\n.box-content {\\n  --ion-background-color: lightgray;\\n}\\n\\n.container {\\n  width: 100%;\\n  margin-top: 15px;\\n}\\n\\n@media only screen and (min-width: 768px) {\\n  .container {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n  }\\n\\n  .list-post {\\n    width: 450px;\\n  }\\n\\n  .box-item {\\n    border-radius: 8px;\\n  }\\n}\\n\\n.box-item {\\n  --ion-background-color: white;\\n}\\n\\n[name=heart] {\\n  vertical-align: middle;\\n}\\n\\n.profile-image {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 50%;\\n}\\n\\n.item-header {\\n  width: 100%;\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n}\\n\\n.editOrDeletePost {\\n  width: 100%;\\n  display: flex;\\n  justify-content: flex-end;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvdHdlZXRzL0c6XFxVbmljdFxcTUFURVJJRSBURVJaTyBBTk5PXFxTZW1pbmFyaW8gcGVyIHRpcm9jaW5pb1xcUHJvZ2V0dG9cXFByb2dldHRvUGFyYWRpZ21hXFxJb25pYy9zcmNcXGFwcFxccGFnZXNcXHR3ZWV0c1xcdHdlZXRzLnBhZ2Uuc2NzcyIsInNyYy9hcHAvcGFnZXMvdHdlZXRzL3R3ZWV0cy5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxtQ0FBQTtBQ0NKOztBREVBO0VBQ0ksaUNBQUE7QUNDSjs7QURFQTtFQUNJLGlCQUFBO0VBQ0EsbUNBQUE7QUNDSjs7QURFQTtFQUNJLFdBQUE7RUFDQSxjQUFBO0FDQ0o7O0FERUE7RUFDSSxpQ0FBQTtBQ0NKOztBREVBO0VBQ0ksV0FBQTtFQUNBLGdCQUFBO0FDQ0o7O0FERUE7RUFDSTtJQUNJLGFBQUE7SUFDQSxzQkFBQTtJQUNBLG1CQUFBO0VDQ047O0VEQ0U7SUFDSSxZQUFBO0VDRU47O0VEQUU7SUFDSSxrQkFBQTtFQ0dOO0FBQ0Y7O0FEQUE7RUFDSSw2QkFBQTtBQ0VKOztBRENBO0VBQ0ksc0JBQUE7QUNFSjs7QURDQTtFQUNJLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7QUNFSjs7QURDQTtFQUNJLFdBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxtQkFBQTtBQ0VKOztBRENBO0VBQ0ksV0FBQTtFQUNBLGFBQUE7RUFDQSx5QkFBQTtBQ0VKIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvdHdlZXRzL3R3ZWV0cy5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudXNlci1kZWxldGVkIHtcbiAgICBjb2xvcjogdmFyKC0taW9uLWNvbG9yLWxpZ2h0LXNoYWRlKTtcbn1cblxuLnVzZXIge1xuICAgIGNvbG9yOiB2YXIoLS1pb24tY29sb3Itc2Vjb25kYXJ5KTtcbn1cblxuLm1lIHtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBjb2xvcjogdmFyKC0taW9uLWNvbG9yLWRhbmdlci10aW50KTtcbn1cblxuLmJveC1pbWFnZXtcbiAgICB3aWR0aDogMTAwJTsgXG4gICAgbWFyZ2luOiAxNXB4IDA7XG59XG5cbi5ib3gtY29udGVudCB7XG4gICAgLS1pb24tYmFja2dyb3VuZC1jb2xvcjogbGlnaHRncmF5O1xufVxuXG4uY29udGFpbmVye1xuICAgIHdpZHRoOiAxMDAlOyBcbiAgICBtYXJnaW4tdG9wOiAxNXB4O1xufVxuXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gICAgLmNvbnRhaW5lciB7IFxuICAgICAgICBkaXNwbGF5OiBmbGV4OyBcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsgXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7IFxuICAgIH1cbiAgICAubGlzdC1wb3N0IHtcbiAgICAgICAgd2lkdGg6IDQ1MHB4O1xuICAgIH1cbiAgICAuYm94LWl0ZW0ge1xuICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgfVxufVxuXG4uYm94LWl0ZW0ge1xuICAgIC0taW9uLWJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xufVxuXG5bbmFtZT1oZWFydF0ge1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG59XG5cbi5wcm9maWxlLWltYWdlIHtcbiAgICB3aWR0aDogNTBweDtcbiAgICBoZWlnaHQ6IDUwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xufVxuXG4uaXRlbS1oZWFkZXIge1xuICAgIHdpZHRoOiAxMDAlOyBcbiAgICBkaXNwbGF5OiBmbGV4OyBcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93OyBcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4uZWRpdE9yRGVsZXRlUG9zdCB7XG4gICAgd2lkdGg6IDEwMCU7IFxuICAgIGRpc3BsYXk6IGZsZXg7IFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG59IiwiLnVzZXItZGVsZXRlZCB7XG4gIGNvbG9yOiB2YXIoLS1pb24tY29sb3ItbGlnaHQtc2hhZGUpO1xufVxuXG4udXNlciB7XG4gIGNvbG9yOiB2YXIoLS1pb24tY29sb3Itc2Vjb25kYXJ5KTtcbn1cblxuLm1lIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGNvbG9yOiB2YXIoLS1pb24tY29sb3ItZGFuZ2VyLXRpbnQpO1xufVxuXG4uYm94LWltYWdlIHtcbiAgd2lkdGg6IDEwMCU7XG4gIG1hcmdpbjogMTVweCAwO1xufVxuXG4uYm94LWNvbnRlbnQge1xuICAtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7XG59XG5cbi5jb250YWluZXIge1xuICB3aWR0aDogMTAwJTtcbiAgbWFyZ2luLXRvcDogMTVweDtcbn1cblxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkge1xuICAuY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuXG4gIC5saXN0LXBvc3Qge1xuICAgIHdpZHRoOiA0NTBweDtcbiAgfVxuXG4gIC5ib3gtaXRlbSB7XG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICB9XG59XG4uYm94LWl0ZW0ge1xuICAtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbn1cblxuW25hbWU9aGVhcnRdIHtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbn1cblxuLnByb2ZpbGUtaW1hZ2Uge1xuICB3aWR0aDogNTBweDtcbiAgaGVpZ2h0OiA1MHB4O1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG59XG5cbi5pdGVtLWhlYWRlciB7XG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4uZWRpdE9yRGVsZXRlUG9zdCB7XG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xufSJdfQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { Tweet } from 'src/app/interfaces/tweet';\nimport { TweetsService } from 'src/app/services/tweets/tweets.service';\nimport { ModalController } from '@ionic/angular';\nimport { NewTweetPage } from '../new-tweet/new-tweet.page';\nimport { AuthService } from 'src/app/services/auth/auth.service';\nimport { UniLoaderService } from 'src/app/shared/uniLoader.service';\nimport { ToastService } from 'src/app/shared/toast.service';\nimport { ToastTypes } from 'src/app/enums/toast-types.enum';\n\n@Component({\n  selector: 'app-tweets',\n  templateUrl: './tweets.page.html',\n  styleUrls: ['./tweets.page.scss'],\n})\nexport class TweetsPage implements OnInit {\n\n  tweets: Tweet[] = [];\n\n  constructor(\n    private tweetsService: TweetsService,\n    private modalCtrl: ModalController,\n    private auth: AuthService,\n    private uniLoader: UniLoaderService,\n    private toastService: ToastService\n  ) { }\n\n  async ngOnInit() {\n\n    // Quando carico la pagina, riempio il mio array di Tweets\n    await this.getTweets();\n\n  }\n\n  async getTweets() {\n\n    try {\n\n      // Avvio il loader\n      await this.uniLoader.show();\n\n      // Popolo il mio array di oggetti 'Tweet' con quanto restituito dalla chiamata API\n      this.tweets = await this.tweetsService.getTweets();\n\n      // La chiamata è andata a buon fine, dunque rimuovo il loader\n      await this.uniLoader.dismiss();\n\n    } catch (err) {\n\n      // Nel caso la chiamata vada in errore, mostro l'errore in un toast\n      await this.toastService.show({\n        message: err.message,\n        type: ToastTypes.ERROR\n      });\n\n    }\n\n  }\n\n  async createOrEditTweet(tweet?: Tweet) {\n\n    /*\n        Creo una modal (assegnandola ad una variabile)\n        per permettere all'utente di scrivere un nuovo tweet\n    */\n    const modal = await this.modalCtrl.create({\n      component: NewTweetPage,\n      componentProps: {\n        tweet\n      } // Passo il parametro tweet. Se non disponibile, rimane undefined.\n    });\n\n    /*\n        Quando l'utente chiude la modal ( modal.onDidDismiss() ),\n        aggiorno il mio array di tweets\n    */\n    modal.onDidDismiss()\n    .then(async () => {\n\n      // Aggiorno la mia lista di tweet, per importare le ultime modifiche apportate dall'utente\n      await this.getTweets();\n\n      // La chiamata è andata a buon fine, dunque rimuovo il loader\n      await this.uniLoader.dismiss();\n\n    });\n\n    // Visualizzo la modal\n    return await modal.present();\n\n  }\n\n  async deleteTweet(tweet: Tweet) {\n\n    try {\n\n      // Mostro il loader\n      await this.uniLoader.show();\n\n      // Cancello il mio tweet\n      await this.tweetsService.deleteTweet(tweet._id);\n\n      // Riaggiorno la mia lista di tweets\n      await this.getTweets();\n\n      // Mostro un toast di conferma\n      await this.toastService.show({\n        message: 'Your tweet was deleted successfully!',\n        type: ToastTypes.SUCCESS\n      });\n\n    } catch (err) {\n\n      // Nel caso la chiamata vada in errore, mostro l'errore in un toast\n      await this.toastService.show({\n        message: err.message,\n        type: ToastTypes.ERROR\n      });\n\n    }\n\n    // Chiudo il loader\n    await this.uniLoader.dismiss();\n\n  }\n\n  canEdit(tweet: Tweet): boolean {\n\n    // Controllo che l'autore del tweet coincida col mio utente\n    if (tweet._author) {\n      return tweet._author._id === this.auth.me._id;\n    }\n\n    return false;\n\n  }\n\n  // Metodo bindato con l'interfaccia in Angular\n  getAuthor(tweet: Tweet): string {\n\n    if (this.canEdit(tweet)) {\n      return 'You';\n    } else {\n      return tweet._author.name + ' ' + tweet._author.surname;\n    }\n\n  }\n\n}\n"]}