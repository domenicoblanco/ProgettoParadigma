{"version":3,"sources":["webpack:///src/app/pages/users/users.page.html","webpack:///src/app/pages/users/users-routing.module.ts","webpack:///src/app/pages/users/users.module.ts","webpack:///src/app/pages/users/users.page.scss","webpack:///src/app/pages/users/users.page.ts"],"names":["routes","path","component","UsersPageRoutingModule","imports","forChild","exports","UsersPageModule","declarations","UsersPage","usersService","auth","toastService","uniLoader","users","usersPics","userPicsAvailable","getUsers","initUserPicts","show","message","type","ERROR","dismiss","user","_id","me","forEach","_","push","Math","ceil","random","selector","template"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKf,QAAMA,MAAM,GAAW,CACrB;AACEC,UAAI,EAAE,EADR;AAEEC,eAAS,EAAE;AAFb,KADqB,CAAvB;;AAWA,QAAaC,sBAAsB;AAAA;AAAA,KAAnC;;AAAaA,0BAAsB,6DAJlC,+DAAS;AACRC,aAAO,EAAE,CAAC,6DAAaC,QAAb,CAAsBL,MAAtB,CAAD,CADD;AAERM,aAAO,EAAE,CAAC,4DAAD;AAFD,KAAT,CAIkC,GAAtBH,sBAAsB,CAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGb,QAAaI,eAAe;AAAA;AAAA,KAA5B;;AAAaA,mBAAe,6DAT3B,+DAAS;AACRH,aAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,0DAHO,EAIP,4EAJO,CADD;AAORI,kBAAY,EAAE,CAAC,qDAAD;AAPN,KAAT,CAS2B,GAAfD,eAAe,CAAf;;;;;;;;;;;;;;;;ACnBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACaf,QAAaE,SAAS;AAOpB,yBACUC,YADV,EAEUC,IAFV,EAGUC,YAHV,EAIUC,SAJV,EAIqC;AAAA;;AAH3B,aAAAH,YAAA,GAAAA,YAAA;AACA,aAAAC,IAAA,GAAAA,IAAA;AACA,aAAAC,YAAA,GAAAA,YAAA;AACA,aAAAC,SAAA,GAAAA,SAAA;AATV,aAAAC,KAAA,GAAgB,EAAhB;AAEA,aAAAC,SAAA,GAAsB,EAAtB;AACQ,aAAAC,iBAAA,GAAoB,EAApB;AAOJ;;AAZgB;AAAA;AAAA,mCAgBH;;;;;;;AAGf,2BAAM,KAAKC,QAAL,EAAN;;;AAEA;AACA,yBAAKC,aAAL;;;;;;;;;AAED;AAxBmB;AAAA;AAAA,mCA4BH;;;;;;;;AAKb,2BAAM,KAAKL,SAAL,CAAeM,IAAf,EAAN;;;;AAGa,2BAAM,KAAKT,YAAL,CAAkBO,QAAlB,EAAN;;;AAAb,yBAAKH,K;;;;;;;;AAKL,2BAAM,KAAKF,YAAL,CAAkBO,IAAlB,CAAuB;AAC3BC,6BAAO,EAAE,aAAIA,OADc;AAE3BC,0BAAI,EAAE,0EAAWC;AAFU,qBAAvB,CAAN;;;;AAQF,2BAAM,KAAKT,SAAL,CAAeU,OAAf,EAAN;;;;;;;;;AAED,SAnDmB,CAsDpB;;AAtDoB;AAAA;AAAA,qCAuDPC,IAvDO,EAuDG;AAErB,cAAIA,IAAI,CAACC,GAAL,KAAa,KAAKd,IAAL,CAAUe,EAAV,CAAaD,GAA9B,EAAmC;AACjC,mBAAO,OAAP;AACD;;AAED,iBAAO,IAAP;AAED;AA/DmB;AAAA;AAAA,wCAmEJ;AAAA;;AAEd;AACA,eAAKX,KAAL,CAAWa,OAAX,CAAmB,UAAAC,CAAC,EAAI;AACtB,iBAAI,CAACb,SAAL,CAAec,IAAf,CAAoBC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,KAAI,CAAChB,iBAA/B,CAApB;AACD,WAFD;AAID;AA1EmB;;AAAA;AAAA,OAAtB;;;;cAQ0B;;cACR;;cACQ;;cACH;;;;AAXVP,aAAS,6DALrB,gEAAU;AACTwB,cAAQ,EAAE,WADD;AAETC,cAAQ,EAAR;AAAA;AAAA,gGAFS;;;;AAAA,KAAV,CAKqB,E,+EAQI,iF,EACR,8E,EACQ,yE,EACH,iF,EAXD,GAATzB,SAAS,CAAT","file":"users-users-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title class='title'>Users</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content [scrollY]=\\\"false\\\">\\n\\n  <ion-list>\\n\\n    <ion-item *ngFor=\\\"let user of users; let i = index\\\" [color]=\\\"getItemColor(user)\\\">\\n\\n      <ion-avatar class=\\\"user-avatar\\\">\\n        <img [src]=\\\"'./assets/users/' + usersPics[i] + '.svg'\\\">\\n      </ion-avatar>\\n      \\n      <ion-label class=\\\"ion-text-wrap\\\">\\n        <ion-text color=\\\"primary\\\">\\n          <h3>{{ user.name }} {{ user.surname }}</h3>\\n        </ion-text>\\n        <p>{{ user.email }}</p>\\n      </ion-label>\\n    \\n    </ion-item>\\n\\n  </ion-list> \\n\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { UsersPage } from './users.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UsersPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class UsersPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { UsersPageRoutingModule } from './users-routing.module';\n\nimport { UsersPage } from './users.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    UsersPageRoutingModule\n  ],\n  declarations: [UsersPage]\n})\nexport class UsersPageModule {}\n","export default \".user-avatar {\\n  margin-right: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvdXNlcnMvRzpcXFVuaWN0XFxNQVRFUklFIFRFUlpPIEFOTk9cXFNlbWluYXJpbyBwZXIgdGlyb2NpbmlvXFxQcm9nZXR0b1xcUHJvZ2V0dG9QYXJhZGlnbWFcXElvbmljL3NyY1xcYXBwXFxwYWdlc1xcdXNlcnNcXHVzZXJzLnBhZ2Uuc2NzcyIsInNyYy9hcHAvcGFnZXMvdXNlcnMvdXNlcnMucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksa0JBQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3VzZXJzL3VzZXJzLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi51c2VyLWF2YXRhciB7IFxuICAgIG1hcmdpbi1yaWdodDogMTBweDsgXG59IiwiLnVzZXItYXZhdGFyIHtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xufSJdfQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { User } from 'src/app/interfaces/user';\nimport { UsersService } from 'src/app/services/users/users.service';\nimport { AuthService } from 'src/app/services/auth/auth.service';\nimport { ToastService } from 'src/app/shared/toast.service';\nimport { ToastTypes } from 'src/app/enums/toast-types.enum';\nimport { UniLoaderService } from 'src/app/shared/uniLoader.service';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.page.html',\n  styleUrls: ['./users.page.scss'],\n})\nexport class UsersPage implements OnInit {\n\n  users: User[] = [];\n\n  usersPics: number[] = [];\n  private userPicsAvailable = 15;\n\n  constructor(\n    private usersService: UsersService,\n    private auth: AuthService,\n    private toastService: ToastService,\n    private uniLoader: UniLoaderService\n  ) {}\n\n\n\n  async ngOnInit() {\n\n    // Quando carico la pagina, riempio il mio array di Users\n    await this.getUsers();\n\n    // Invoco questa funzione per avere un pool di immagini da utilizzare per la lista utenti\n    this.initUserPicts();\n\n  }\n\n\n\n  async getUsers() {\n\n    try {\n\n      // Avvio il loader\n      await this.uniLoader.show();\n\n      // Popolo il mio array di oggetti 'User' con quanto restituito dalla chiamata API\n      this.users = await this.usersService.getUsers();\n\n    } catch (err) {\n\n      // Nel caso la chiamata vada in errore, mostro l'errore in un toast\n      await this.toastService.show({\n        message: err.message,\n        type: ToastTypes.ERROR\n      });\n\n    }\n\n    // Chiudo il loader\n    await this.uniLoader.dismiss();\n\n  }\n\n\n  // Metodo bindato con l'interfaccia in Angular, per cambiare il colore di un item quando l'utente coincide con l'account connesso\n  getItemColor(user: User): string | null  {\n\n    if (user._id === this.auth.me._id) {\n      return 'light';\n    }\n\n    return null;\n\n  }\n\n\n\n  initUserPicts() {\n\n    // Popolo l'array userPics con numeri random\n    this.users.forEach(_ => {\n      this.usersPics.push(Math.ceil(Math.random() * this.userPicsAvailable));\n    });\n\n  }\n\n\n\n}\n"]}